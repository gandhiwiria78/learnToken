(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/helpers/classCallCheck'), require('@babel/runtime/helpers/createClass'), require('eventemitter3'), require('web3-core-subscriptions'), require('@babel/runtime/helpers/possibleConstructorReturn'), require('@babel/runtime/helpers/getPrototypeOf'), require('@babel/runtime/helpers/inherits'), require('lodash/isFunction'), require('@babel/runtime/helpers/toConsumableArray'), require('@babel/runtime/regenerator'), require('@babel/runtime/helpers/asyncToGenerator'), require('lodash/isString'), require('lodash/cloneDeep'), require('rxjs'), require('@babel/runtime/helpers/get')) :
    typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/helpers/classCallCheck', '@babel/runtime/helpers/createClass', 'eventemitter3', 'web3-core-subscriptions', '@babel/runtime/helpers/possibleConstructorReturn', '@babel/runtime/helpers/getPrototypeOf', '@babel/runtime/helpers/inherits', 'lodash/isFunction', '@babel/runtime/helpers/toConsumableArray', '@babel/runtime/regenerator', '@babel/runtime/helpers/asyncToGenerator', 'lodash/isString', 'lodash/cloneDeep', 'rxjs', '@babel/runtime/helpers/get'], factory) :
    (global = global || self, factory(global.Web3CoreMethod = {}, global._classCallCheck, global._createClass, global.EventEmitter, global.web3CoreSubscriptions, global._possibleConstructorReturn, global._getPrototypeOf, global._inherits, global.isFunction, global._toConsumableArray, global._regeneratorRuntime, global._asyncToGenerator, global.isString, global.cloneDeep, global.rxjs, global._get));
}(this, function (exports, _classCallCheck, _createClass, EventEmitter, web3CoreSubscriptions, _possibleConstructorReturn, _getPrototypeOf, _inherits, isFunction, _toConsumableArray, _regeneratorRuntime, _asyncToGenerator, isString, cloneDeep, rxjs, _get) { 'use strict';

    _classCallCheck = _classCallCheck && _classCallCheck.hasOwnProperty('default') ? _classCallCheck['default'] : _classCallCheck;
    _createClass = _createClass && _createClass.hasOwnProperty('default') ? _createClass['default'] : _createClass;
    EventEmitter = EventEmitter && EventEmitter.hasOwnProperty('default') ? EventEmitter['default'] : EventEmitter;
    _possibleConstructorReturn = _possibleConstructorReturn && _possibleConstructorReturn.hasOwnProperty('default') ? _possibleConstructorReturn['default'] : _possibleConstructorReturn;
    _getPrototypeOf = _getPrototypeOf && _getPrototypeOf.hasOwnProperty('default') ? _getPrototypeOf['default'] : _getPrototypeOf;
    _inherits = _inherits && _inherits.hasOwnProperty('default') ? _inherits['default'] : _inherits;
    isFunction = isFunction && isFunction.hasOwnProperty('default') ? isFunction['default'] : isFunction;
    _toConsumableArray = _toConsumableArray && _toConsumableArray.hasOwnProperty('default') ? _toConsumableArray['default'] : _toConsumableArray;
    _regeneratorRuntime = _regeneratorRuntime && _regeneratorRuntime.hasOwnProperty('default') ? _regeneratorRuntime['default'] : _regeneratorRuntime;
    _asyncToGenerator = _asyncToGenerator && _asyncToGenerator.hasOwnProperty('default') ? _asyncToGenerator['default'] : _asyncToGenerator;
    isString = isString && isString.hasOwnProperty('default') ? isString['default'] : isString;
    cloneDeep = cloneDeep && cloneDeep.hasOwnProperty('default') ? cloneDeep['default'] : cloneDeep;
    _get = _get && _get.hasOwnProperty('default') ? _get['default'] : _get;

    var PromiEvent =
    function () {
      function PromiEvent() {
        var _this = this;
        _classCallCheck(this, PromiEvent);
        this.promise = new Promise(function (resolve, reject) {
          _this.resolve = resolve;
          _this.reject = reject;
        });
        this.eventEmitter = new EventEmitter();
        return new Proxy(this, {
          get: this.proxyHandler
        });
      }
      _createClass(PromiEvent, [{
        key: "proxyHandler",
        value: function proxyHandler(target, name) {
          if (name === 'resolve' || name === 'reject') {
            return target[name];
          }
          if (name === 'then') {
            return target.promise.then.bind(target.promise);
          }
          if (name === 'catch') {
            return target.promise.catch.bind(target.promise);
          }
          if (target.eventEmitter[name]) {
            return target.eventEmitter[name];
          }
        }
      }]);
      return PromiEvent;
    }();

    var AbstractMethod =
    function () {
      function AbstractMethod(rpcMethod, parametersAmount, utils, formatters, moduleInstance) {
        _classCallCheck(this, AbstractMethod);
        this.utils = utils;
        this.formatters = formatters;
        this.moduleInstance = moduleInstance;
        this._arguments = {
          parameters: []
        };
        this._rpcMethod = rpcMethod;
        this._parametersAmount = parametersAmount;
      }
      _createClass(AbstractMethod, [{
        key: "beforeExecution",
        value: function beforeExecution(moduleInstance) {}
      }, {
        key: "afterExecution",
        value: function afterExecution(response) {
          return response;
        }
      }, {
        key: "execute",
        value: function () {
          var _execute = _asyncToGenerator(
          _regeneratorRuntime.mark(function _callee() {
            var error, response;
            return _regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    this.beforeExecution(this.moduleInstance);
                    if (!(this.parameters.length !== this.parametersAmount)) {
                      _context.next = 7;
                      break;
                    }
                    error = new Error("Invalid Arguments length: expected: ".concat(this.parametersAmount, ", given: ").concat(this.parameters.length));
                    if (!this.callback) {
                      _context.next = 6;
                      break;
                    }
                    this.callback(error, null);
                    return _context.abrupt("return");
                  case 6:
                    throw error;
                  case 7:
                    _context.prev = 7;
                    _context.next = 10;
                    return this.moduleInstance.currentProvider.send(this.rpcMethod, this.parameters);
                  case 10:
                    response = _context.sent;
                    if (response) {
                      response = this.afterExecution(response);
                    }
                    if (!this.callback) {
                      _context.next = 15;
                      break;
                    }
                    this.callback(false, response);
                    return _context.abrupt("return");
                  case 15:
                    return _context.abrupt("return", response);
                  case 18:
                    _context.prev = 18;
                    _context.t0 = _context["catch"](7);
                    if (!this.callback) {
                      _context.next = 23;
                      break;
                    }
                    this.callback(_context.t0, null);
                    return _context.abrupt("return");
                  case 23:
                    throw _context.t0;
                  case 24:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this, [[7, 18]]);
          }));
          function execute() {
            return _execute.apply(this, arguments);
          }
          return execute;
        }()
      }, {
        key: "setArguments",
        value: function setArguments(methodArguments) {
          var parameters = cloneDeep(_toConsumableArray(methodArguments));
          var callback = null;
          if (parameters.length > this.parametersAmount) {
            if (!isFunction(parameters[parameters.length - 1])) {
              throw new TypeError("The latest parameter should be a function otherwise it can't be used as callback");
            }
            callback = parameters.pop();
          }
          this._arguments = {
            callback: callback,
            parameters: parameters
          };
        }
      }, {
        key: "getArguments",
        value: function getArguments() {
          return this._arguments;
        }
      }, {
        key: "isHash",
        value: function isHash(parameter) {
          return isString(parameter) && parameter.startsWith('0x');
        }
      }, {
        key: "rpcMethod",
        set: function set(value) {
          this._rpcMethod = value;
        }
        ,
        get: function get() {
          return this._rpcMethod;
        }
      }, {
        key: "parametersAmount",
        set: function set(value) {
          this._parametersAmount = value;
        }
        ,
        get: function get() {
          return this._parametersAmount;
        }
      }, {
        key: "parameters",
        get: function get() {
          return this._arguments.parameters;
        }
        ,
        set: function set(value) {
          this._arguments.parameters = value;
        }
      }, {
        key: "callback",
        get: function get() {
          return this._arguments.callback;
        }
        ,
        set: function set(value) {
          this._arguments.callback = value;
        }
      }]);
      return AbstractMethod;
    }();

    var AbstractGetBlockMethod =
    function (_AbstractMethod) {
      _inherits(AbstractGetBlockMethod, _AbstractMethod);
      function AbstractGetBlockMethod(rpcMethod, utils, formatters, moduleInstance) {
        _classCallCheck(this, AbstractGetBlockMethod);
        return _possibleConstructorReturn(this, _getPrototypeOf(AbstractGetBlockMethod).call(this, rpcMethod, 2, utils, formatters, moduleInstance));
      }
      _createClass(AbstractGetBlockMethod, [{
        key: "beforeExecution",
        value: function beforeExecution(moduleInstance) {
          this.parameters[0] = this.formatters.inputBlockNumberFormatter(this.parameters[0]);
          if (isFunction(this.parameters[1])) {
            this.callback = this.parameters[1];
            this.parameters[1] = false;
          } else {
            this.parameters[1] = !!this.parameters[1];
          }
        }
      }, {
        key: "afterExecution",
        value: function afterExecution(response) {
          return this.formatters.outputBlockFormatter(response);
        }
      }]);
      return AbstractGetBlockMethod;
    }(AbstractMethod);

    var GetBlockByNumberMethod =
    function (_AbstractGetBlockMeth) {
      _inherits(GetBlockByNumberMethod, _AbstractGetBlockMeth);
      function GetBlockByNumberMethod(utils, formatters, moduleInstance) {
        _classCallCheck(this, GetBlockByNumberMethod);
        return _possibleConstructorReturn(this, _getPrototypeOf(GetBlockByNumberMethod).call(this, 'eth_getBlockByNumber', utils, formatters, moduleInstance));
      }
      return GetBlockByNumberMethod;
    }(AbstractGetBlockMethod);

    var GetTransactionReceiptMethod =
    function (_AbstractMethod) {
      _inherits(GetTransactionReceiptMethod, _AbstractMethod);
      function GetTransactionReceiptMethod(utils, formatters, moduleInstance) {
        _classCallCheck(this, GetTransactionReceiptMethod);
        return _possibleConstructorReturn(this, _getPrototypeOf(GetTransactionReceiptMethod).call(this, 'eth_getTransactionReceipt', 1, utils, formatters, moduleInstance));
      }
      _createClass(GetTransactionReceiptMethod, [{
        key: "afterExecution",
        value: function afterExecution(response) {
          if (response !== null) {
            return this.formatters.outputTransactionReceiptFormatter(response);
          }
          return response;
        }
      }]);
      return GetTransactionReceiptMethod;
    }(AbstractMethod);

    var TransactionObserver =
    function () {
      function TransactionObserver(provider, timeout, blockConfirmations, getTransactionReceiptMethod, getBlockByNumberMethod, newHeadsSubscription) {
        _classCallCheck(this, TransactionObserver);
        this.provider = provider;
        this.timeout = timeout;
        this.blockConfirmations = blockConfirmations;
        this.getTransactionReceiptMethod = getTransactionReceiptMethod;
        this.getBlockByNumberMethod = getBlockByNumberMethod;
        this.newHeadsSubscription = newHeadsSubscription;
        this.blockNumbers = [];
        this.lastBlock = false;
        this.confirmations = 0;
        this.confirmationChecks = 0;
        this.interval = false;
      }
      _createClass(TransactionObserver, [{
        key: "observe",
        value: function observe(transactionHash) {
          var _this = this;
          return rxjs.Observable.create(function (observer) {
            if (_this.provider.supportsSubscriptions()) {
              _this.startSocketObserver(transactionHash, observer);
            } else {
              _this.startHttpObserver(transactionHash, observer);
            }
          });
        }
      }, {
        key: "startSocketObserver",
        value: function startSocketObserver(transactionHash, observer) {
          var _this2 = this;
          this.newHeadsSubscription.subscribe(
          function () {
            var _ref = _asyncToGenerator(
            _regeneratorRuntime.mark(function _callee(error, newHead) {
              var receipt;
              return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.prev = 0;
                      if (!observer.closed) {
                        _context.next = 5;
                        break;
                      }
                      _context.next = 4;
                      return _this2.newHeadsSubscription.unsubscribe();
                    case 4:
                      return _context.abrupt("return");
                    case 5:
                      if (!error) {
                        _context.next = 7;
                        break;
                      }
                      throw error;
                    case 7:
                      _this2.getTransactionReceiptMethod.parameters = [transactionHash];
                      _context.next = 10;
                      return _this2.getTransactionReceiptMethod.execute();
                    case 10:
                      receipt = _context.sent;
                      if (_this2.blockNumbers.includes(newHead.number)) {
                        _context.next = 25;
                        break;
                      }
                      if (!receipt) {
                        _context.next = 19;
                        break;
                      }
                      _this2.confirmations++;
                      _this2.emitNext(receipt, observer);
                      if (!_this2.isConfirmed()) {
                        _context.next = 19;
                        break;
                      }
                      _context.next = 18;
                      return _this2.newHeadsSubscription.unsubscribe();
                    case 18:
                      observer.complete();
                    case 19:
                      _this2.blockNumbers.push(newHead.number);
                      _this2.confirmationChecks++;
                      if (!_this2.isTimeoutTimeExceeded()) {
                        _context.next = 25;
                        break;
                      }
                      _context.next = 24;
                      return _this2.newHeadsSubscription.unsubscribe();
                    case 24:
                      _this2.emitError(new Error('Timeout exceeded during the transaction confirmation process. Be aware the transaction could still get confirmed!'), receipt, observer);
                    case 25:
                      _context.next = 30;
                      break;
                    case 27:
                      _context.prev = 27;
                      _context.t0 = _context["catch"](0);
                      _this2.emitError(_context.t0, false, observer);
                    case 30:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, null, [[0, 27]]);
            }));
            return function (_x, _x2) {
              return _ref.apply(this, arguments);
            };
          }());
        }
      }, {
        key: "startHttpObserver",
        value: function startHttpObserver(transactionHash, observer) {
          var _this3 = this;
          var interval = setInterval(
          _asyncToGenerator(
          _regeneratorRuntime.mark(function _callee2() {
            var receipt, block;
            return _regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.prev = 0;
                    if (!observer.closed) {
                      _context2.next = 4;
                      break;
                    }
                    clearInterval(interval);
                    return _context2.abrupt("return");
                  case 4:
                    _this3.getTransactionReceiptMethod.parameters = [transactionHash];
                    _context2.next = 7;
                    return _this3.getTransactionReceiptMethod.execute();
                  case 7:
                    receipt = _context2.sent;
                    if (!receipt) {
                      _context2.next = 22;
                      break;
                    }
                    if (!_this3.lastBlock) {
                      _context2.next = 16;
                      break;
                    }
                    _context2.next = 12;
                    return _this3.getBlockByNumber(_this3.lastBlock.number + 1);
                  case 12:
                    block = _context2.sent;
                    if (block && _this3.isValidConfirmation(block)) {
                      _this3.lastBlock = block;
                      _this3.confirmations++;
                      _this3.emitNext(receipt, observer);
                    }
                    _context2.next = 21;
                    break;
                  case 16:
                    _context2.next = 18;
                    return _this3.getBlockByNumber(receipt.blockNumber);
                  case 18:
                    _this3.lastBlock = _context2.sent;
                    _this3.confirmations++;
                    _this3.emitNext(receipt, observer);
                  case 21:
                    if (_this3.isConfirmed()) {
                      observer.complete();
                      clearInterval(interval);
                    }
                  case 22:
                    _this3.confirmationChecks++;
                    if (_this3.isTimeoutTimeExceeded()) {
                      clearInterval(interval);
                      _this3.emitError(new Error('Timeout exceeded during the transaction confirmation process. Be aware the transaction could still get confirmed!'), receipt, observer);
                    }
                    _context2.next = 30;
                    break;
                  case 26:
                    _context2.prev = 26;
                    _context2.t0 = _context2["catch"](0);
                    clearInterval(interval);
                    _this3.emitError(_context2.t0, false, observer);
                  case 30:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, null, [[0, 26]]);
          })), 1000);
        }
      }, {
        key: "emitNext",
        value: function emitNext(receipt, observer) {
          observer.next({
            receipt: receipt,
            confirmations: this.confirmations
          });
        }
      }, {
        key: "emitError",
        value: function emitError(error, receipt, observer) {
          observer.error({
            error: error,
            receipt: receipt,
            confirmations: this.confirmations,
            confirmationChecks: this.confirmationChecks
          });
        }
      }, {
        key: "getBlockByNumber",
        value: function getBlockByNumber(blockNumber) {
          this.getBlockByNumberMethod.parameters = [blockNumber];
          return this.getBlockByNumberMethod.execute();
        }
      }, {
        key: "isConfirmed",
        value: function isConfirmed() {
          return this.confirmations === this.blockConfirmations;
        }
      }, {
        key: "isValidConfirmation",
        value: function isValidConfirmation(block) {
          return this.lastBlock.hash === block.parentHash && this.lastBlock.number !== block.number;
        }
      }, {
        key: "isTimeoutTimeExceeded",
        value: function isTimeoutTimeExceeded() {
          return this.confirmationChecks === this.timeout;
        }
      }]);
      return TransactionObserver;
    }();

    var GetTransactionCountMethod =
    function (_AbstractMethod) {
      _inherits(GetTransactionCountMethod, _AbstractMethod);
      function GetTransactionCountMethod(utils, formatters, moduleInstance) {
        _classCallCheck(this, GetTransactionCountMethod);
        return _possibleConstructorReturn(this, _getPrototypeOf(GetTransactionCountMethod).call(this, 'eth_getTransactionCount', 2, utils, formatters, moduleInstance));
      }
      _createClass(GetTransactionCountMethod, [{
        key: "beforeExecution",
        value: function beforeExecution(moduleInstance) {
          this.parameters[0] = this.formatters.inputAddressFormatter(this.parameters[0]);
          if (isFunction(this.parameters[1])) {
            this.callback = this.parameters[1];
            this.parameters[1] = moduleInstance.defaultBlock;
          }
          this.parameters[1] = this.formatters.inputDefaultBlockNumberFormatter(this.parameters[1], moduleInstance);
        }
      }, {
        key: "afterExecution",
        value: function afterExecution(response) {
          return this.utils.hexToNumber(response);
        }
      }]);
      return GetTransactionCountMethod;
    }(AbstractMethod);

    var ChainIdMethod =
    function (_AbstractMethod) {
      _inherits(ChainIdMethod, _AbstractMethod);
      function ChainIdMethod(utils, formatters, moduleInstance) {
        _classCallCheck(this, ChainIdMethod);
        return _possibleConstructorReturn(this, _getPrototypeOf(ChainIdMethod).call(this, 'eth_chainId', 0, utils, formatters, moduleInstance));
      }
      _createClass(ChainIdMethod, [{
        key: "afterExecution",
        value: function afterExecution(response) {
          return this.utils.hexToNumber(response);
        }
      }]);
      return ChainIdMethod;
    }(AbstractMethod);

    var AbstractMethodFactory =
    function () {
      function AbstractMethodFactory(utils, formatters) {
        _classCallCheck(this, AbstractMethodFactory);
        this.utils = utils;
        this.formatters = formatters;
        this._methods = null;
      }
      _createClass(AbstractMethodFactory, [{
        key: "hasMethod",
        value: function hasMethod(name) {
          return typeof this.methods[name] !== 'undefined';
        }
      }, {
        key: "createMethod",
        value: function createMethod(name, moduleInstance) {
          var method = this.methods[name];
          if (method.Type === 'observed-transaction-method') {
            return new method(this.utils, this.formatters, moduleInstance, this.createTransactionObserver(moduleInstance));
          }
          if (method.Type === 'eth-send-transaction-method') {
            return new method(this.utils, this.formatters, moduleInstance, this.createTransactionObserver(moduleInstance), new ChainIdMethod(this.utils, this.formatters, moduleInstance), new GetTransactionCountMethod(this.utils, this.formatters, moduleInstance));
          }
          return new method(this.utils, this.formatters, moduleInstance);
        }
      }, {
        key: "getTimeout",
        value: function getTimeout(moduleInstance) {
          var timeout = moduleInstance.transactionBlockTimeout;
          if (!moduleInstance.currentProvider.supportsSubscriptions()) {
            timeout = moduleInstance.transactionPollingTimeout;
          }
          return timeout;
        }
      }, {
        key: "createTransactionObserver",
        value: function createTransactionObserver(moduleInstance) {
          return new TransactionObserver(moduleInstance.currentProvider, this.getTimeout(moduleInstance), moduleInstance.transactionConfirmationBlocks, new GetTransactionReceiptMethod(this.utils, this.formatters, moduleInstance), new GetBlockByNumberMethod(this.utils, this.formatters, moduleInstance), new web3CoreSubscriptions.NewHeadsSubscription(this.utils, this.formatters, moduleInstance));
        }
      }, {
        key: "methods",
        get: function get() {
          if (this._methods) {
            return this._methods;
          }
          throw new Error('No methods defined for MethodFactory!');
        }
        ,
        set: function set(value) {
          this._methods = value;
        }
      }]);
      return AbstractMethodFactory;
    }();

    var MethodProxy =
    function MethodProxy(target, methodFactory) {
      _classCallCheck(this, MethodProxy);
      return new Proxy(target, {
        get: function get(target, name) {
          if (methodFactory.hasMethod(name)) {
            var RpcMethod = function RpcMethod() {
              method.setArguments(arguments);
              return method.execute();
            };
            if (typeof target[name] !== 'undefined') {
              throw new TypeError("Duplicated method ".concat(name, ". This method is defined as RPC call and as Object method."));
            }
            var method = methodFactory.createMethod(name, target);
            RpcMethod.method = method;
            RpcMethod.request = function () {
              method.setArguments(arguments);
              return method;
            };
            return RpcMethod;
          }
          return target[name];
        }
      });
    };

    var GetProtocolVersionMethod =
    function (_AbstractMethod) {
      _inherits(GetProtocolVersionMethod, _AbstractMethod);
      function GetProtocolVersionMethod(utils, formatters, moduleInstance) {
        _classCallCheck(this, GetProtocolVersionMethod);
        return _possibleConstructorReturn(this, _getPrototypeOf(GetProtocolVersionMethod).call(this, 'eth_protocolVersion', 0, utils, formatters, moduleInstance));
      }
      _createClass(GetProtocolVersionMethod, [{
        key: "afterExecution",
        value: function afterExecution(response) {
          return this.utils.hexToNumber(response);
        }
      }]);
      return GetProtocolVersionMethod;
    }(AbstractMethod);

    var VersionMethod =
    function (_AbstractMethod) {
      _inherits(VersionMethod, _AbstractMethod);
      function VersionMethod(utils, formatters, moduleInstance) {
        _classCallCheck(this, VersionMethod);
        return _possibleConstructorReturn(this, _getPrototypeOf(VersionMethod).call(this, 'net_version', 0, utils, formatters, moduleInstance));
      }
      _createClass(VersionMethod, [{
        key: "afterExecution",
        value: function afterExecution(response) {
          return this.utils.hexToNumber(response);
        }
      }]);
      return VersionMethod;
    }(AbstractMethod);

    var ListeningMethod =
    function (_AbstractMethod) {
      _inherits(ListeningMethod, _AbstractMethod);
      function ListeningMethod(utils, formatters, moduleInstance) {
        _classCallCheck(this, ListeningMethod);
        return _possibleConstructorReturn(this, _getPrototypeOf(ListeningMethod).call(this, 'net_listening', 0, utils, formatters, moduleInstance));
      }
      return ListeningMethod;
    }(AbstractMethod);

    var PeerCountMethod =
    function (_AbstractMethod) {
      _inherits(PeerCountMethod, _AbstractMethod);
      function PeerCountMethod(utils, formatters, moduleInstance) {
        _classCallCheck(this, PeerCountMethod);
        return _possibleConstructorReturn(this, _getPrototypeOf(PeerCountMethod).call(this, 'net_peerCount', 0, utils, formatters, moduleInstance));
      }
      _createClass(PeerCountMethod, [{
        key: "afterExecution",
        value: function afterExecution(response) {
          return this.utils.hexToNumber(response);
        }
      }]);
      return PeerCountMethod;
    }(AbstractMethod);

    var GetNodeInfoMethod =
    function (_AbstractMethod) {
      _inherits(GetNodeInfoMethod, _AbstractMethod);
      function GetNodeInfoMethod(utils, formatters, moduleInstance) {
        _classCallCheck(this, GetNodeInfoMethod);
        return _possibleConstructorReturn(this, _getPrototypeOf(GetNodeInfoMethod).call(this, 'web3_clientVersion', 0, utils, formatters, moduleInstance));
      }
      return GetNodeInfoMethod;
    }(AbstractMethod);

    var GetCoinbaseMethod =
    function (_AbstractMethod) {
      _inherits(GetCoinbaseMethod, _AbstractMethod);
      function GetCoinbaseMethod(utils, formatters, moduleInstance) {
        _classCallCheck(this, GetCoinbaseMethod);
        return _possibleConstructorReturn(this, _getPrototypeOf(GetCoinbaseMethod).call(this, 'eth_coinbase', 0, utils, formatters, moduleInstance));
      }
      return GetCoinbaseMethod;
    }(AbstractMethod);

    var IsMiningMethod =
    function (_AbstractMethod) {
      _inherits(IsMiningMethod, _AbstractMethod);
      function IsMiningMethod(utils, formatters, moduleInstance) {
        _classCallCheck(this, IsMiningMethod);
        return _possibleConstructorReturn(this, _getPrototypeOf(IsMiningMethod).call(this, 'eth_mining', 0, utils, formatters, moduleInstance));
      }
      return IsMiningMethod;
    }(AbstractMethod);

    var GetHashrateMethod =
    function (_AbstractMethod) {
      _inherits(GetHashrateMethod, _AbstractMethod);
      function GetHashrateMethod(utils, formatters, moduleInstance) {
        _classCallCheck(this, GetHashrateMethod);
        return _possibleConstructorReturn(this, _getPrototypeOf(GetHashrateMethod).call(this, 'eth_hashrate', 0, utils, formatters, moduleInstance));
      }
      _createClass(GetHashrateMethod, [{
        key: "afterExecution",
        value: function afterExecution(response) {
          return this.utils.hexToNumber(response);
        }
      }]);
      return GetHashrateMethod;
    }(AbstractMethod);

    var IsSyncingMethod =
    function (_AbstractMethod) {
      _inherits(IsSyncingMethod, _AbstractMethod);
      function IsSyncingMethod(utils, formatters, moduleInstance) {
        _classCallCheck(this, IsSyncingMethod);
        return _possibleConstructorReturn(this, _getPrototypeOf(IsSyncingMethod).call(this, 'eth_syncing', 0, utils, formatters, moduleInstance));
      }
      _createClass(IsSyncingMethod, [{
        key: "afterExecution",
        value: function afterExecution(response) {
          if (typeof response !== 'boolean') {
            return this.formatters.outputSyncingFormatter(response);
          }
          return response;
        }
      }]);
      return IsSyncingMethod;
    }(AbstractMethod);

    var GetGasPriceMethod =
    function (_AbstractMethod) {
      _inherits(GetGasPriceMethod, _AbstractMethod);
      function GetGasPriceMethod(utils, formatters, moduleInstance) {
        _classCallCheck(this, GetGasPriceMethod);
        return _possibleConstructorReturn(this, _getPrototypeOf(GetGasPriceMethod).call(this, 'eth_gasPrice', 0, utils, formatters, moduleInstance));
      }
      _createClass(GetGasPriceMethod, [{
        key: "afterExecution",
        value: function afterExecution(response) {
          return this.formatters.outputBigNumberFormatter(response);
        }
      }]);
      return GetGasPriceMethod;
    }(AbstractMethod);

    var SubmitWorkMethod =
    function (_AbstractMethod) {
      _inherits(SubmitWorkMethod, _AbstractMethod);
      function SubmitWorkMethod(utils, formatters, moduleInstance) {
        _classCallCheck(this, SubmitWorkMethod);
        return _possibleConstructorReturn(this, _getPrototypeOf(SubmitWorkMethod).call(this, 'eth_submitWork', 3, utils, formatters, moduleInstance));
      }
      return SubmitWorkMethod;
    }(AbstractMethod);

    var GetWorkMethod =
    function (_AbstractMethod) {
      _inherits(GetWorkMethod, _AbstractMethod);
      function GetWorkMethod(utils, formatters, moduleInstance) {
        _classCallCheck(this, GetWorkMethod);
        return _possibleConstructorReturn(this, _getPrototypeOf(GetWorkMethod).call(this, 'eth_getWork', 0, utils, formatters, moduleInstance));
      }
      return GetWorkMethod;
    }(AbstractMethod);

    var GetProofMethod =
    function (_AbstractMethod) {
      _inherits(GetProofMethod, _AbstractMethod);
      function GetProofMethod(utils, formatters, moduleInstance) {
        _classCallCheck(this, GetProofMethod);
        return _possibleConstructorReturn(this, _getPrototypeOf(GetProofMethod).call(this, 'eth_getProof', 3, utils, formatters, moduleInstance));
      }
      _createClass(GetProofMethod, [{
        key: "beforeExecution",
        value: function beforeExecution(moduleInstance) {
          this.parameters[0] = this.formatters.inputAddressFormatter(this.parameters[0]);
          this.parameters[2] = this.formatters.inputDefaultBlockNumberFormatter(this.parameters[2], moduleInstance);
        }
      }, {
        key: "afterExecution",
        value: function afterExecution(response) {
          response.nonce = this.utils.toBN(response.nonce).toString(10);
          response.balance = this.utils.toBN(response.balance).toString(10);
          for (var i = 0; i < response.storageProof.length; i++) {
            response.storageProof[i].value = this.utils.toBN(response.storageProof[i].value).toString(10);
          }
          return response;
        }
      }]);
      return GetProofMethod;
    }(AbstractMethod);

    var GetAccountsMethod =
    function (_AbstractMethod) {
      _inherits(GetAccountsMethod, _AbstractMethod);
      function GetAccountsMethod(utils, formatters, moduleInstance) {
        _classCallCheck(this, GetAccountsMethod);
        return _possibleConstructorReturn(this, _getPrototypeOf(GetAccountsMethod).call(this, 'eth_accounts